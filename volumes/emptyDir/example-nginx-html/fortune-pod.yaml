apiVersion: v1
kind: Pod
metadata:
  name: fortune
spec:
  containers:
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
  # Can use a initContainer to generate the html content and then
  # use the above pod to expose the content
  initContainers: 
  - image: nginx:alpine # can probably find a slimmer image to use, something more lightweight
    name: html-generator
    command: ["/bin/sh", "-c"]
    args: 
      - "echo 'hello world' > /var/htdocs/index.html"
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  volumes:
  - name: html
    emptyDir: {}

# run file:
# kubectl apply -f kubernetes-by-examples/volumes/emptyDir/example-nginx-html/fortune-pod.yaml --kubeconfig="ctx.yml"

# use a prot forward to expose pod:
# kubectl port-forward fortune 8080:80
# you can then visit http://locahost:8080 from your local environment

# instead of using port forward you could expose the pod
# to expose a pod you need to label the pod
# eg
# $ kubectl label pod fortune app=exposepod --kubeconfig="ctx.yml"
# then expose the pod 
# $ kubectl expose pod fortune --port=80 --type=NodePort --name=fortune --kubeconfig="ctx.yml"
# you can then visit the url using your cluster ip with the assigned port
# find the port by fetching you services:
# $ kubectl get svc --kubeconfig="ctx.yml"

# This will return something like this:
# NAME                 TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
# service/fortune      NodePort    10.245.2.74   <none>        80:31241/TCP   54s

# that cluster IP is an interal cluster it, you will have to use the actual IP of the
# server (not the CLUSTER-IP shown in the reponse column above)
# 
